minpoints3.c and minpoints4.c

minpoints3.c and minpoints4.c were written and donated by Andrew
Sutherland, based on functions in his smalljac package.  They should be
compiled with (for example)

   	gcc -O3 -funroll-loops -fopenmp minpoints3.c -lm -o minpoints3

(as in the Makefile) and run with

    ./minpoints3 p

where p is an odd prime (in fact 3<p<64)

What do they do?  They enumerate all monic polynomials of degree 8
(resp. 10) mod p which are square-free, to find the smallest number of
affine points on each, outputting the point count and the polynomials
whenever the record is broken.  So if a line is output starting with
0, you know that a smooth curve of genus 3 (or 4) over F_p can have no
smooth affine points, while if the program terminates before this
happens then you know that there are no such curves, and can also see
what the least number of affine points is.

How do they do it?  Use efficient C!  The top 2 coefficients are set
to 1,0, to eliminate translations.  The next is set to 0, 1, u in turn
where u is a quadratic non-residue, to eliminate scalings.
Parallelisation is done over all p possibilities for the next
coefficient -- so will use p threads if you have enough cores!  (The
memory requirement for each is tiny).  Note that it is only checked
that gcd(f,f')=1 when an f is found which beats the current record
lowest point count, and the record-beating f is ignored if it is not
square-free.  So as they are these do not establish when Gamma_8^+ and
Gamma_10^+ are empty: for that we would need to cut out the
square-free test.

Output for genus 3:

For all p up to 23 there are pointless curves:

0 pts on y^2=x^8+0*x^6+0*x^5+0*x^4+0*x^3+0*x^2+0*x+2 mod 5
0 pts on y^2=x^8+0*x^6+0*x^5+0*x^4+0*x^3+6*x^2+0*x+3 mod 7
0 pts on y^2=x^8+0*x^6+8*x^5+0*x^4+1*x^3+10*x^2+0*x+8 mod 11
0 pts on y^2=x^8+0*x^6+4*x^5+0*x^4+2*x^3+12*x^2+10*x+8 mod 13
0 pts on y^2=x^8+0*x^6+0*x^5+0*x^4+0*x^3+0*x^2+0*x+6 mod 17
0 pts on y^2=x^8+0*x^6+9*x^5+1*x^4+7*x^3+2*x^2+5*x+8 mod 19
0 pts on y^2=x^8+1*x^6+0*x^5+12*x^4+0*x^3+10*x^2+0*x+14 mod 23

but mod 29, 31, 37 the minima are
1 pts on y^2=x^8+0*x^6+0*x^5+0*x^4+0*x^3+0*x^2+11*x+0 mod 29 (8.1s)
2 pts on y^2=x^8+3*x^6+0*x^5+12*x^4+0*x^3+13*x^2+0*x+5 mod 31 (12.3s)
6 pts on y^2=x^8+1*x^6+24*x^5+1*x^4+7*x^3+28*x^2+22*x+35 mod 37 (45s)

Output for genus 4 (need to rerun after fixing f[1] bug):

For all p up to 37 there are pointless curves:

0 pts on y^2=x^10+0*x^8+0*x^7+0*x^6+0*x^5+0*x^4+0*x^3+4*x^2+0*x+2 mod 5
0 pts on y^2=x^10+0*x^8+2*x^7+0*x^6+0*x^5+2*x^4+0*x^3+3*x^2+5*x+6 mod 7
0 pts on y^2=x^10+0*x^8+10*x^7+0*x^6+0*x^5+0*x^4+0*x^3+7*x^2+0*x+10 mod 11
0 pts on y^2=x^10+0*x^8+8*x^7+0*x^6+0*x^5+1*x^4+0*x^3+7*x^2+5*x+11 mod 13
0 pts on y^2=x^10+0*x^8+4*x^7+0*x^6+0*x^5+2*x^4+10*x^3+14*x^2+16*x+10 mod 17
0 pts on y^2=x^10+0*x^8+0*x^7+0*x^6+0*x^5+0*x^4+0*x^3+2*x^2+0*x+12 mod 19
0 pts on y^2=x^10+0*x^8+12*x^7+0*x^6+1*x^5+3*x^4+11*x^3+17*x^2+10*x+5 mod 23
0 pts on y^2=x^10+0*x^8+10*x^7+0*x^6+0*x^5+2*x^4+1*x^3+15*x^2+16*x+27 mod 29
0 pts on y^2=x^10+0*x^8+0*x^7+0*x^6+0*x^5+0*x^4+0*x^3+0*x^2+0*x+12 mod 31
3 pts on y^2=x^10+0*x^8+28*x^7+0*x^6+1*x^5+28*x^4+31*x^3+32*x^2+6*x+13 mod 37

[AS] for p=41, 43, 47, 53, 59, 61 the minima are 1,1,2,6, 8, 8.

Using minpoints3odd (genus 3, odd degree, so degree 7)
min=0 for p up to 19, not for 23

=================================================================================

Application to the Gamma_i sets in the paper:

For p for which these programs prove a positive minimum it does not
follow that $\Gamma_i^+$ is empty (for i=8 and 10) since here we
ignore f which are not square-free.  We need a version of these which
do not include this check.

Secondly we need a version for monic f of odd degree.

Thirdly we need a version for even degree with a non-square leading
coefficient u (easy adaptation: in minpoints3.c line 47 replace f[8]=1
by f[8]=1; while(qmap[f[8]]) f[8]++ or, better (since we use a fixed
nonresidue elsewhere) compute one at the start.  But we also need to
ignore such f for which lc(f)*f is a square.

For genus 2 we would need a minpoints2.c fixing the degree at 6 or 5.
For genus 5 we would need a minpoints5.c fixing the degree at 12 or 11.
