Best results so far for rho_g(infty)                        30 May - 2 June 2022

======================================================================

Method 1. Rigorous exact bounds computed with C++ code xhyper.cc,
using Manjul's scaling trick to reduce dimension by 1, pari's sturm
and sturmpart except for degree 4 when exact criterion for negative
definiteness used.  Bounds obtained are exact rationals with
denominators 2^k or 5*2^k, hence finite decimals.  Here we give exact
rationals (Q) when they were recorded, and approximate reals (R). I am
recomputing these, in a new parallelised version of the code, to get
the exact rational bounds.

g  lower(Q)                          upper(Q)                          lower(R)     upper(R)
1  1967989973755715/2251799813685248 4920596471678897/5629499534213120 0.8739631124 0.8740735196
2  7634888455/8589934592             27502617421/30064771072           0.8888179966 0.9147788937
3  68423952253/77309411328           24422270719/25769803776           0.8850662691 0.9477088351
4  40874434225/47244640256           11526799219/11811160064           0.8651655299 0.9759243932
5  92746879717/111669149696          111019835163/11166914969          0.8305506039 0.9941853723

Notes

These lower bounds are bettered by the ones from the hyperplane method (Method 2 below)

g=1: recursion depth 48, original time 407040m (>40 weeks!)
g=2: recursion depth 30, original time      ?, rerun to depth 30 in  27048s
g=3: recursion depth 30, original time  3929m, rerun to depth 30 in  93480s
g=4: recursion depth 30, original time 10142m, rerun to depth 30 in 155162s
g=5: recursion depth 30, not done in 2016,                          208272s

The parallel version used d threads for degree d, so takes 1/d of the time.

======================================================================

Method 2. Lower bounds from 'vinci' and/or 'lrs' software, using
hyperplanes of height up to a bound h to define a region in which
several necessary conditions are satisfied.  I first used floating
point arithmetic (with no error bounds), which is much faster and
useful to give an idea of what we thing the lower bounds should be.
Then I used the lrs program directly (which is what vinci calls for
the volumes), which works better, and gives an exact answer, so I have
been redoing these at least at height 2, aiming to prove that the
lower bound is >0.9 for g>1.

g h  lower bound (floating point method)
1 13 0.874083 (compare with 0.873963 from Method 1)
2 8  0.901512 (compare with 0.888818 from Method 1)
3 5  0.917222 (compare with 0.885066 from Method 1)
4 4  0.926454 (compare with 0.865166 from Method 1)

g h  lower bound (exact method)
2 2  0.88957970817966 =  1 - 77256349758298059510894967024960483/699657177903484989710310360219648000
2 3  0.8978286024259  =  1 - 520552588969297976384954938771107327722676715833343034223870991976822193893387902120553811552876706066748241142529139383823864700966916383931714395135062218747135577731912992928842199668160264298420590915382461723489617978021349760559933832156943587375146238438955894316505805773862271/5094895453415895373162495743413525490475650649810562656136396723077031563549593490689970055019687226142255825064446744914483035400814525729580079485302179295038695551155006258224551191378627112991187694390604433794546532155780721484517353528525123352639207311151652577656921128960000000
2 4  0.89986890746692336 = 1 -  3530128015849223965072859165060162126165668292170459817958779741752365201753239320777817442785838025737065103445994770117942205411607147481323514368875682680368177387555335123656372897108002059700053186010779851892803619628135348392620616008109979216048641655370956465978702541432319511895151979248359275166911247153617309182164080899546204873259000092159539130010649741379934521668762627614750550240253777789539378137580831875089701338637696338278713433430329808396667486562957840685519095318240287812787035236037876509266246437746561357613497245684352409630547145176175126652106148616150799118668539866885483643163370497629674656700176318773540258565933629869578780698799036406903364077296300117780038204713784227332049648797392669952150675850859342369603381017325483730661554594135816016060077078113/35255063402839681838816587153067040305387169794237998661356647220474112318800074189722132354208230996737933772522836583258502212191741660574303846114564537297756486854447796716136256798233067523744395987538341042381018748242062461912111188948661786437271502412392062555270382793255235172605126969594269433857948556926410011991753270533053497678851907896905694893844201623472788064062423871513064164789140395385581003931186866038334165922403242499708028865553558375965032498750923918603589903189945158310581681779328403352146981042812770788829287515266700836907717015760245683298005079871875876208426147893791981698490895215579715138338254577083113480536064535660991961696851551892454655297047219055838536862493538257950187770469129839087267549654255190896254402257077812996642701126715969844019200000000

These g=2 bounds are all better than the lower bound of 0.8888179966
from the boxes method.

3 2 0.902677197545660 = 1 - 2190988766094332950773461407648350143269404370100920355725155943003050836972819/22512594282539919071324938451154952953714263549543912205481751535440363520000000

This better than the  lower bound of  0.8850662691 from the boxes method.

4 2 running
5 2 running

Notes:

1.  We might be able to prove a lower bound of 90% for all g>1, using
only the values at 2, 1/2, -2, -1/2 as well as -1, 1. The above
results establish this rigorously for g=2,3 and (so far) approximately
for g=4,5.

2. In Section 5 of hyper-2022 actual analysis was done to work out the
exact value of the bound obtained using h=1; these agree with the
values from vinci with h=1 (not recorded here).  Although these values
are not as good as above (using larger h), we have them for g up to
10, and even for g=4 they give a better value than the boxes method
does.

3. Genus 1, degree 4:  in the quartics paper we gave

Lower bound 0.873954 (via boxes)
Monte Carlo 0.87411
Upper bound 0.874124 (via boxes)

and the hyperplane method improves the lower bound to 0.874083
(rigorous, h=13). This narrows the gap from 0.00017 to 0.000041.
