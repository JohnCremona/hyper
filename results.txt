Results of the python programs in boxes.sage and the C progams in boxes.cc:

1. GENUS 1 (QUARTICS)

Expecting density 0.874 for "not negative definite"

Sampling, 10^6 points: 0.8740745
                       0.8739535
                       0.8740895
                       0.8736505 (16s)
Sampling, 10^7 points: 0.87413925 (1m on laptop)
Sampling, 10^8 points: 0.874112095 (10m on laptop)


With tolerance 0.001:

sage: time res = quartic_densities2(0.001)
0 real roots:
(0.0124511718750000, 0.683349609375000), diameter 0.670898437500000
2 real roots:
(0.316650390625000, 0.987548828125000), diameter 0.670898437500000
4 real roots:
(0.000000000000000, 0.670898437500000), diameter 0.670898437500000
not negative definite:
(0.658325195312500, 0.993774414062500), diameter 0.335449218750000
CPU times: user 4.68 s, sys: 209 ms, total: 4.89 s

With tolerance 0.0001:

sage: time res = quartic_densities2(0.0001)
0 real roots:
(0.0687408447265625, 0.528121948242188), diameter 0.459381103515625
2 real roots:
(0.471878051757812, 0.931259155273438), diameter 0.459381103515625
4 real roots:
(0.000000000000000, 0.459381103515625), diameter 0.459381103515625
not negative definite:
(0.736137390136718, 0.965629577636719), diameter 0.229492187500000
CPU times: user 1min 42s, sys: 228 ms, total: 1min 42s

With tolerance 0.0001:

sage: time res = quartic_densities2(0.00001)
0 real roots:
(0.133889079093933, 0.424112200737000), diameter 0.290223121643066
2 real roots:
(0.570640802383422, 0.860863924026490), diameter 0.290223121643066
4 real roots:
(0.00524699687957763, 0.295470118522645), diameter 0.290223121643066
not negative definite:
(0.787943899631500, 0.933055460453034), diameter 0.145111560821533
CPU times: user 38min 2s, sys: 3.28 s, total: 38min 5s

Neg Def only (quartic_densities4(tol)):
10^-3: 1.1s,  (0.774949596, 0.993573588), diameter 0.21862399
10^-4: 30s,   (0.802309097, 0.964721679), diameter 0.162412
10^-5: 11m53s (0.826131912, 0.932004682), diameter 0.105872
10^-6: 11m53s (0.826131912, 0.932004682), diameter 0.105872
old:
10^-7: 4h24m  (0.842790509, 0.908747432), diameter 0.0659569

Convexity version
10^-3: 5s, (0.770751953125000, 0.948852539062500), diameter 0.1781
10^-4: 2m, (0.782096862792968, 0.914749145507813), diameter 0.1326
10^-5: 53m,(0.788767337799072, 0.895013689994813), diameter 0.1062

New Convexity version
2^-13:
(0.835123062133789, 0.914749145507813), diameter 0.0796260833740234
CPU times: user 1min 51s, sys: 225 ms, total: 1min 51s
(0.853896081447601, 0.895013689994813), diameter 0.0411176085472107
CPU times: user 33min 39s, sys: 2.87 s, total: 33min 42s
(0.863508559763431, 0.884636919945479), diameter 0.0211283601820469

2^-16 (7m):
(0.853896081447601, 0.894989252090455), diameter 0.0410931706428528
2^-21 (1h56m)
(0.863508559763431, 0.884634776040912), diameter 0.0211262162774801

2^-26
(0.868331281759310, 0.879372696275823), diameter 0.0110414145165123

C program: (use tolerance 1 mod 5)
time echo 21 | ./boxes (0.8s)
lower bound = 0.864183
upper bound = 0.883735
middle value = 0.873959
error bound  = 0.00977624

time echo 26 | ./boxes (2m5s)
lower bound = 0.868672
upper bound = 0.878928
middle value = 0.8738
error bound  = 0.0051277

time echo 31 | ./boxes (34m54s)
lower bound = 0.870914
upper bound = 0.876517
middle value = 0.873715 [so 0.871, 0.872, 0.873, 0.874, 0.875, 0.876, 0.877]
error bound  = 0.00280155

time echo 36 | ./boxes (623m=10h23m)
lower bound = 0.872033
upper bound = 0.875314
middle value = 0.873674   [so 0.872, 0.873, 0.874, 0.875]
error bound  = 0.00164025

time echo 41 | ./boxes (1088m=18h8m)
lower bound = 0.872193
upper bound = 0.875139
middle value = 0.873666  [so 0.872, 0.873, 0.874, 0.875]
error bound  = 0.00147275


time echo 35 | ./boxes (13h36m)
lower bound = 0.871948
upper bound = 0.875422
middle value = 0.873685
error bound  = 0.00173744

$ time echo 46 | ./boxes (14d 23h)
Input log_2-tolerance: tolerance = 1.42109e-14
res[0] = 13.9628, res[1] = 2.00596
lower bound = 0.872673
upper bound = 0.874627
middle value = 0.87365
error bound  = 0.000977271

##########################################################
#
# New multidegree version using pari for sturm()
#

Density of non-negative definite real polynomials of degree 4

depth 15: 0.6s
lower bound for non-neg def density  = 0.820663
upper bound for non-neg def density  = 0.929527
middle value for non-neg def density = 0.875095
error bound for non-neg def density  = 0.0544319

depth 16: 0.9s
lower bound for non-neg def density  = 0.826683
upper bound for non-neg def density  = 0.924866
middle value for non-neg def density = 0.875774
error bound for non-neg def density  = 0.0490913

depth 17:1.7s
lower bound for non-neg def density  = 0.835802
upper bound for non-neg def density  = 0.914549
middle value for non-neg def density = 0.875175
error bound for non-neg def density  = 0.0393734

depth 18: 3s
lower bound for non-neg def density  = 0.839987
upper bound for non-neg def density  = 0.908849
middle value for non-neg def density = 0.874418
error bound for non-neg def density  = 0.034431

depth 19: 5.7s
lower bound for non-neg def density  = 0.843435
upper bound for non-neg def density  = 0.906045
middle value for non-neg def density = 0.87474
error bound for non-neg def density  = 0.0313051

depth 20: 10.7s
lower bound for non-neg def density  = 0.846392
upper bound for non-neg def density  = 0.903441
middle value for non-neg def density = 0.874916
error bound for non-neg def density  = 0.0285246

depth 21: 19.3s
lower bound for non-neg def density  = 0.849678
upper bound for non-neg def density  = 0.900605
middle value for non-neg def density = 0.875142
error bound for non-neg def density  = 0.0254638

depth 22: 34s
lower bound for non-neg def density  = 0.854531
upper bound for non-neg def density  = 0.894987
middle value for non-neg def density = 0.874759
error bound for non-neg def density  = 0.0202284

depth 23: 1m1s
lower bound for non-neg def density  = 0.856817
upper bound for non-neg def density  = 0.891985
middle value for non-neg def density = 0.874401
error bound for non-neg def density  = 0.0175844

depth 24: 1m48s
lower bound for non-neg def density  = 0.85853
upper bound for non-neg def density  = 0.890443
middle value for non-neg def density = 0.874486
error bound for non-neg def density  = 0.0159569

depth 25: 3m9s
lower bound for non-neg def density  = 0.860009
upper bound for non-neg def density  = 0.88906
middle value for non-neg def density = 0.874534
error bound for non-neg def density  = 0.0145252

depth 30:
lower bound for non-neg def density  = 0.866987
upper bound for non-neg def density  = 0.881617
middle value for non-neg def density = 0.874302
error bound for non-neg def density  = 0.00731467

##########################################################
#
# New version using pari for sturm() and Manjul's scaling
#

Density of non-negative definite real polynomials of degree 4

depth   time            lower bound   upper bound difference
        (laptop)
20      9.3s            0.863649      0.885567    0.0109
21      16.3s           0.865273      0.883833    0.00927
22      29s             0.867479      0.881216    0.00686
23      47s             0.868189      0.88041     0.00611
24      1m22s           0.868794      0.879821    0.0055
25      2m22s           0.869624      0.878944    0.00466
26      4m19s           0.870762      0.87765     0.00344
27      6m56s           0.871123      0.877251    0.00306
28      11m52s          0.871425      0.876954    0.002764

        (atkin)
30      65m             0.872427      0.875876    0.00172
35      813m            0.87336       0.874895    0.000767
36      1456m           0.873436      0.87482     0.000692316
37      2400m           0.873542      0.874711    0.000584326
38      4095m           0.873691      0.874554    0.000431416
39                      0.873738      0.874506    0.000383828
40                      0.873776      0.874468    0.00034625

Runs 13/11/19 using June 2016 code, on laptop:

20          10s          0.863649      0.885567   0.0109591
25       2m 24s          0.869624      0.878944   0.00466013
30      39m 28s          0.872427      0.875876   0.00172421
35     516m 52s          0.87336       0.874895   0.000767444
40    6620m 35s          0.873776      0.874468   0.00034625

Runs 27/11/19 using new f(x)+f(-x) condition to improve lower bound, on laptop:

20          14s          0.863654      0.885567   0.0109565
25       3m 59s          0.869624      0.878944   0.00465997
30      66m 30s          0.872427      0.875876   0.00172421

As above, with caching:

20          14s          0.863654      0.885567   0.0109565
25       3m 19s          0.869624      0.878944   0.00465997

[At depth 25 we cached 20985095 values and reused 23943643]

With caching but no f(x)+f(-x) test:

20            7s          0.863654      0.885567   0.0109565
25        1m 44s          0.869624      0.878944   0.00465997

     times on galois: (20) 7.7s (25) 1m50s
     running 30, 35, 40 on galois
     times: 32m29s, other used too much memory for the cache

Exact rational lb, ub, mid, diff & 10dp:

20 36224059/41943040 = 0.8636488676 (denom 5*2^23) round down: 0.863648
   37143397/41943040 = 0.8855675936 (denom 5*2^23) round up:   0.885568
   2292733/2621440 = 0.8746082306   (denom 5*2^19)
   459669/41943040 = 0.01095936298  (denom 5*2^23)

25  583594479/671088640 = 0.8696235403   (denom 5*2^27)  round down: 0.869623
    1179698423/1342177280 = 0.8789438181 (denom  5*2^28) round up:   0.878944
    2346887381/2684354560 = 0.8742836792 (denom 5*2^29)
    2501893/536870912 = 0.00466013886    (denom 2^29)

30 37470466139/42949672960 = 0.8724272749 (denom 5*2^33)
   7523714881/8589934592 = 0.8758756892   (denom 2^33)
   2346532517/2684354560 = 0.8741514821   (denom 5*2^29)
   74054133/42949672960 = 0.001724207145  (denom 5*2^33)

35 150042161337/171798691840 = 0.873360325    (denom 5*2^35)
   120244682423/137438953472 = 0.8748952126   (denom 2^37)
   1201392057463/1374389534720 = 0.8741277688 (denom 5*2^38)
   1054766767/1374389534720 = 0.000767443829  (denom 5*2^38)

40 6620m
   38428696683183/43980465111040 = 0.8737674007 (denom 5*2^43)
   9614643465009/10995116277760 = 0.8744467291  (denom 5*2^41)
   76887270543219/87960930222080 = 0.8741070649 (denom 5*2^44)
   29877176853/87960930222080 = 0.0003396641756 (denom 5*2^44)

41 14283m
  76861613353739/87960930222080 = 0.8738153764
  76911662844091/87960930222080 = 0.8743843733
  15377327619783/17592186044416 = 0.8740998749
  3128093147/10995116277760 = 0.0002844984144

42 23746m
  7686773382747/8796093022208 = 0.8738849582
  30761713226999/35184372088832 = 0.8743004749
  61508806757987/70368744177664 = 0.8740927165
  14619696011/70368744177664 = 0.000207758376

43 38323m 24s
  76869194094973/87960930222080 = 0.8739015595
  307590571174113/351843720888320 = 0.8742249837
  123013469510801/140737488355328 = 0.8740632716
  113794794221/703687441776640 = 0.0001617121288

44 64136m 18s
  61496279586877/70368744177664 = 0.8739146947
  76895089806331/87960930222080 = 0.8741959596
  615061757159709/703687441776640 = 0.8740553272
  98961290939/703687441776640 = 0.0001406324528


46 167994m 41s
 61499079891225/70368744177664 = 0.8739544895
 61510977793259/70368744177664 = 0.8741235688
 30752514421121/35184372088832 = 0.8740390291
 5948951017/70368744177664 = 0.8453967861e-4

47 263095m18.804s

lower bound for non-neg def density  =
4919953536624349/5629499534213120 = 0.8739593114
upper bound for non-neg def density  =
4920672871111063/5629499534213120 = 0.8740870909
middle value for non-neg def density =
2460156601933853/2814749767106560 = 0.8740232012
error bound for non-neg def density  = 359667243357/5629499534213120 =
0.6388973676e-4

48 407040m12.780s

lower bound for non-neg def density  =
1967989973755715/2251799813685248 = 0.8739631124
upper bound for non-neg def density  =
4920596471678897/5629499534213120 = 0.8740735196
middle value for non-neg def density =
19681142812136369/22517998136852480 = 0.874018316
error bound for non-neg def density  = 1243074579219/22517998136852480
= 0.5520360077e-4

Reruns 31/5/22 with parallel:
depth time LB(R)                 LB(Q)          UB(R)                UB(Q)
20    7.6s 0.8636488676    36224059/41943040    0.8855675936   37143397/41943040
25  111s   0.8696235403   583594479/671088640   0.8789438181 1179698423/1342177280
30 1550s   0.8724272749 37470466139/42949672960 0.8758756892 7523714881/8589934592

######################################################################

2. GENUS 2 (SEXTICS)

depth 15: 1.3s
lower bound for non-neg def density  = 0.791779
upper bound for non-neg def density  = 0.984665
middle value for non-neg def density = 0.888222
error bound for non-neg def density  = 0.0964432

depth 20: 40s
lower bound for non-neg def density  = 0.832038
upper bound for non-neg def density  = 0.959689
middle value for non-neg def density = 0.895864
error bound for non-neg def density  = 0.0638256

depth 21: 1m5s
lower bound for non-neg def density  = 0.836803
upper bound for non-neg def density  = 0.956916
middle value for non-neg def density = 0.89686
error bound for non-neg def density  = 0.0600566

depth 22: 2m
lower bound for non-neg def density  = 0.84115
upper bound for non-neg def density  = 0.954219
middle value for non-neg def density = 0.897684
error bound for non-neg def density  = 0.0565345

depth 23: 3m48s
lower bound for non-neg def density  = 0.845613
upper bound for non-neg def density  = 0.951163
middle value for non-neg def density = 0.898388
error bound for non-neg def density  = 0.052775

depth 24: 6m56s
lower bound for non-neg def density  = 0.851078
upper bound for non-neg def density  = 0.9476
middle value for non-neg def density = 0.899339
error bound for non-neg def density  = 0.0482609

depth 25: 13m
lower bound for non-neg def density  = 0.859619
upper bound for non-neg def density  = 0.940217
middle value for non-neg def density = 0.899918
error bound for non-neg def density  = 0.0402992

depth 30: 4h 29m 41s
lower bound for non-neg def density  = 0.873674
upper bound for non-neg def density  = 0.928693
middle value for non-neg def density = 0.901183
error bound for non-neg def density  = 0.0275091

Rerun 30/6/2016

depth 20 0.854508 0.940993
depth 25 0.873882 0.922731
depth 30 0.885038 0.911627
depth 35 0.891171 0.90542

Scaling version 11/7/16, rerun 31/5/22 using degree*threads:
depth time     lower bound                      upper bound
15    5.6s     0.831899 (763271/917504)         0.965358 (1771439/1835008) now 2.6s
20    2m14s    0.859028 (3152647/3670016)       0.942962 (27685479/29360128) now 50s
21    4m48s    0.865167                         0.937478
22    7m10s    0.871313                         0.930741
23    13m30s   0.87408                          0.928612
24    27m10s   0.87599                          0.927106
25    47m42s   0.877907 (1649629683/1879048192) 0.925502 (434765483/469762048) now 1047s
30    854m     0.888818 (7634888455/8589934592) 0.914779 (27502617421/30064771072) now 27048s
35

######################################################################

3. GENUS 3 (OCTICS)

depth 10: <0.1s
lower bound for non-neg def density  = 0.751465
upper bound for non-neg def density  = 1
middle value for non-neg def density = 0.875732
error bound for non-neg def density  = 0.124268

depth 15: 2.6s
lower bound for non-neg def density  = 0.765549
upper bound for non-neg def density  = 0.997864
middle value for non-neg def density = 0.881706
error bound for non-neg def density  = 0.116158

depth 16: 5.3s
lower bound for non-neg def density  = 0.77232
upper bound for non-neg def density  = 0.996254
middle value for non-neg def density = 0.884287
error bound for non-neg def density  = 0.111967

depth 17: 9s
lower bound for non-neg def density  = 0.780399
upper bound for non-neg def density  = 0.99544
middle value for non-neg def density = 0.887919
error bound for non-neg def density  = 0.10752

depth 18: 16s
lower bound for non-neg def density  = 0.786978
upper bound for non-neg def density  = 0.99434
middle value for non-neg def density = 0.890659
error bound for non-neg def density  = 0.103681

depth 19: 40s
lower bound for non-neg def density  = 0.792554
upper bound for non-neg def density  = 0.993203
middle value for non-neg def density = 0.892879
error bound for non-neg def density  = 0.100325

depth 20: 1m
lower bound for non-neg def density  = 0.797645
upper bound for non-neg def density  = 0.991823
middle value for non-neg def density = 0.894734
error bound for non-neg def density  = 0.0970892

depth 25: 33m 28s
lower bound for non-neg def density  = 0.8363
upper bound for non-neg def density  = 0.975382
middle value for non-neg def density = 0.905841
error bound for non-neg def density  = 0.0695414

depth 30: 12h 45m
lower bound for non-neg def density  = 0.857288
upper bound for non-neg def density  = 0.965943
middle value for non-neg def density = 0.911616
error bound for non-neg def density  = 0.0543273

Rerun 1/7/16:

depth 20 0.82748 0.981656
depth 25 0.857916 0.961839
depth 30 0.880053 0.944467

Scaling version 11/7/16, rerun parallel 31/5/22:
depth time     lower bound                  upper bound
15    17s      0.803164 (315817/393216)     0.992016 (260051/262144) 4s
16    30s      0.810227                           0.990688
17    1m2s     0.815707                           0.989251
18    1m50s    0.820758                           0.9875
19    3m30s    0.825936                           0.985259
20    6m52s    0.832059 (62818333/75497472)       0.982374 (74166767/75497472)   143s
25    173m20s  0.862922 (14477427/16777216)       0.964074 (258791743/268435456) 4585s
30    3929m    0.885066 (68423952253/77309411328) 0.947709 (24422270719/25769803776) 93480s

######################################################################

4. GENUS 4 (degree 10)

depth 25: 50m 20s
lower bound for non-neg def density  = 0.801402
upper bound for non-neg def density  = 0.995446
middle value for non-neg def density = 0.898424
error bound for non-neg def density  = 0.0970217

depth 30: 23h 50m
lower bound for non-neg def density  = 0.835325
upper bound for non-neg def density  = 0.985618
middle value for non-neg def density = 0.910471
error bound for non-neg def density  = 0.0751462

Scaling version 13/7/16, rerun parallel 31/5/22:
depth time     lower bound                        upper bound
10    1s       0.758711 (68369/90112)             1
15    6s       0.772657 (1114011/1441792)         1
20    174s     0.808547 (18652105/23068672)       0.995449 (91854769/92274688)
25   7163s     0.831469 (1227576509/1476395008)   0.990015 (2923307865/2952790016)
30   155162s   0.865166 (40874434225/47244640256) 0.975924 (11526799219/11811160064)

######################################################################

5. GENUS 5 (degree 12)

Scaling version parallel 31/5/22:
depth time     lower bound                             upper bound
15    10s      0.7650348957 (2607141/3407872)          1
20    317s     0.7746470616 (84476737/109051904)       1
25   8316s     0.8117065974 (1416290399/1744830464)    0.9973090062 (54379223/54525952)
30 208272s     0.8305506039 (92746879717/111669149696) 0.9941853723 (111019835163/11166914969)

#################################
Lower bounds only using simplified neg def criterion
[Using +-1 only Tom worked out 0.83750 g=1 deg=4
                               0.85653 g=2 deg=6
                               0.86793 g=3 deg=8
                               0.87572 g=4 deg=10

deg 4, depth 30 (26s):   0.832657
       depth 35 (6m31s): 0.835068

using \pm2 also: depth 30 (24s):  0.8468
                 depth 40 (108m): 0.850598
with <pm(1/2) too, depth 25:      0.853022
                   depth 35:      0.862339

deg 6, depth 30 (1m37s): 0.835258
                  depth 35:         0.86036
- with \pm2 also, depth 30 (1m30s): 0.851669
                  depth 35          0.874276

deg 8, depth 25 (8s):    0.815031
       depth 30 (2m53s): 0.835993
       depth 35:         0.852482
       depth 40:         0.862524
  1,2  depth 35:         0.866017
       depth 40:

deg 10, depth 25 (9s):    0.788425
        depth 30 (4m41s): 0.809969
        depth 35 (116m):  0.832771
 1,2    depth 35 (1540m): 0.841185


======================================================================
Lower bounds from vinci
======================================================================

Notes: hyper.sage contains a function make_vinci_input(degree, depth,
prefix) which creates a file prefix.ine for vinci input for given
degree and height bound. More notes below under Genus 2.

Genus 1, degree 4, successive height bounds on hyperplanes:

1  0.837500
2  0.865456 = 29798535703/34431022080
3  0.871582 = 165332882028090684736624504986978293/189692965607627338716651497072640000
            = 0.871581513307539
4  0.872837 = 582616934566221796420055046918520978113322773245916578749 /
	      667498128368111496869605515181004404115781019344568320000
	    = 0.872836806285276
5  0.873543
6  0.873720
7  0.873893
8  0.873960

9 (8369s) V = 4004392541946702149428580870635266205949044932610027098750099736769505194089935411523188395410099681724015054427539361521915089773235515354887691019009370889027888484163399119852815606200147131594859166125119244481140727499202832314577327811514252039309451434852037516897108225921387750070387009292516854181736900512884581162634362243587701334454397265868457208261694977360121204520962418736468703811960545405422624261213856855824615444007585989639407731523113086659651169136949666622551259128164903611441476499065078165354664483164880680192559770903959436396499913495942486256917059571160487693358534928205407840888999061181465874181526687651809333088528600918940398978833654579226650919329282747152183616769647972912696171689824607532532319084861065363807907120112096935735868804101544577970043401036119024538065646247044913944849933249635031527417299259954127532557090511793622969460272936808031438125693763313597873097209360617204833637378413842744843034624551217/31783562051243652446914618919767140728887424789605403615017587347761114289690849771342320537358880814387077503524106313157656855254148623421643673674949052441053359768409633251374579162942538388482219303866779470156342686733936068996416886931852263730385648619688480668761535301926650608682771944414728495116205039578719993663984253805653363242957185723218542824808229236055573289673792155192573775458538294044098660697925342974984467541095172798137873466538445895682133712291300302783700625340675242265361201821757113487814733826757227062501636996141130666301243046218653773537572348551766268343789637879061745852106688268567959515525935942556307194813201396561766406816648433109727587006400420682729378949332594482147158391728278419445063583783382368088890353554374366654446504621727288462245483229979628328359953846195579420951498098253757323589626915470557164761653921844661215863279786577315971811612066484856748814613716320235474095444766656570798899200000000000 = 1 - 0.87401058020210119591641016554220385434 beats boxes LB of 0.8739631124

10 (14461s) V = 122755634704053122125291571265324994305984736336192058754145978516078292578689585373056528410984438211154205911110351653923206220679876243377018549797806194282737350805927154329505281831988433438742634449128982307430936506146000200549305012934575692052423732744532046997750400793379112417606710216373597133460637084860449745451162076339302206458988280247526975864324259719306128986129781498654096341818062648143413564436486230022409247205648222730897927565993246894917032226383945640226474737894534847098760315713673924763303566032605825214115638679430263325024658397290071200535087194896039160317820123889067685781771031843102095949812913365474204147926467482432319161321487142615913881971811198850005347979798357819216934071717225070319874107045123289328369955044470947005782082597662167798528060437947771882396737803260042748685242195371022392652535418689069604263811445925218724195123594478581899508341086837965046239549747883315931596452490428904750234960300373373629552999081472190910298928114170386562348403996775517439955248413455866038179030102105075205048867295490045181902688155562096414013936328205513841312933782739027495797846892943712981127882403947039620981253062734069227356119506630931528981733184739569232088594040439891968734572232300310523806626718828936811461/974515898888971558806245601892088282701192268631783454145394604395797889659074606890371043942418372172547582676725301017193455601962341050134371667284100864701443949173699250751231577981901637303418262650058576406298153448259964542759995717534544623297580201745606825685637188140207471500998626183223719210381007623082808004579341472498547511377489487209235088387760667933334265236045093169214090529892583885470470242870182233177395493362316160736355800670227693907998466027085880191820089180331368076369740562419341596030874519293925138404869257678291188278813719821421975360013344978226748104575598677124966479303307104563643312668466383203652059125392847951072707381247773214379581899927340887195293902512300880122048968195761639644959912861667904297766417272652497268296665128331735835830444073140601478645575086691535906470759647428337850294946327547323003069477917741932623666419585419410102823528469429690493425556449825446938741089020967553092421426131824976288232735966977502223065525083905475883016110495845721531857773344236447051680227493241468329775827927939756683067727486085941601932073439312889117428788865324241874583967478696599115629873189021582528590516509070969991351859820308555914134182029313051690101374142118569415874476926428759084261294735360000000000000 = 1 - 0.87403424116117072814123971991657362755

12 (86628s) V = 4569148635954545766916656287395362108363717690014603147655322314515733963639809919629121506781085286476686227577857474376605623572208057448013429765376861448037765050601574857396873609952384407933629745437305807839210097212711131133418321951658276906862234992251081621235013455636777837629740762657092578647967443759776858172580791339450424651480598653090985805593599583722962798438741589347066401321234020007837874070295697248690131168605924723319303189440349748096307019667882377846919241222540896513323841372981433867611077201260173728424353293535126488325456042262160133102252667142310875913363774484378774704262461800673661789686497758752313608304429069109075643750916490802117975501591501212250537859687942019934265971832071844759456480486285011528389358089901325891882406640187267550859668969327286647993800390144352376689063200984262284461214167435587402693570993244458960432467466679406868408872890358975626423681947811144022769985846683692999849994190244878089121388955072279245399796035360897474584060176762896889096536803156910254991577549660257128434756782960129866449471782666641455803233056621535037968903821000533164316516219426934808423167191027283923816186366533749853105565207276278947156898270544628303814053708394508434236023562898627641624529945651548638660854441555900076926026488784083636974555850957276896271982214366721385235174375240614621115950948227033431924872250633186433524843503496546491035774549184643677994212861164069218305152830245377818499530610441341440042258468294939627002970062795541140353863402430770909106154298104685849751255184392285502308979082123592802853637096520928155788277775493779796038911006904244560579065043964306270916876140310217336244692543093772273029256723386104071084072513395572721593378385196075172489693212550028119521847984719275036892137038019930686521327526279610325978177635162866901820902591988603950659761011999478150178917700326464208572150129198649729132110234668361037784037651105348035603436193722330991428739291142661677392644024221760774493341825206077405942007148356618678795556191938293024239010280229844180950695430790679991902410624572720290335047824070176130918632319203099647655963071250203553750375712466107719213082813763965987356670426045003348267227229168848641074007346893114332692932097626168724791729328520281684005388054559293503945312420961165417460659320229010498935118293551171862234580804436817320046826224095829325910059547769560165484230020509196578947459615169146928317924350084835746914116779705549271208968545825385457189646498121779646926930143809172303908284941782803463290628251795346313291055555739595884088021273941117971738235478243903707351721558314999552416257153060932584633146287487721347/36283305314433148045498042144311118180355509142245869420151428156143302996625260792037707654797322582796679125314823966623197969458346550760894595139717102472425585906649837118242085889753281667066095371232576736940181091257671744258296247856620428300555184052450710142238575924659197897221372734071342783434657055083618353570730333653645476287725301218994758034440332423346383669176271045482336391266227247566024963215831974948974472650497752927406057373883527906371343643260085190244437711194863058686235795885133007850858873757876070127706298774353029081614728806740187094368040800377835326740853712242146803201034298226375201659570143921968778791173452787472496257824317499622871352121709469029723507105056277625682959295209389291499960056249599249161169712795923421402466308526271206495827738433498309676545118847639165178144766883154915219339386379406221227471928713362617457789741372277484776805535714503393079638482091664713652694075251945509420106942336670042622147974821822844123531577083850855528810596320026052877919521778499191161508163855474849786707468688442545953300857264940406533946235347869922301973856374671117922966677502559794039741606986935669211638005786407765255197651085954120976718643617996804204687605643950112264808105954697940074064760719753579437219065221921182058605108280017694785026885217657397996974034982514402285210591406113359743194886839385561049693489316164924112477437444741388689028966368301960606179392254495675887581522438602169656191698331366464902417834990868433697161644178597239753310579943210661880993594950456547748891056160106188268850418878322959858557187666013196618465989098668084830908788100960618737475231894938825558970058370778864788595366018907156298882910067592534449170244392388461667275166311948331083996788192785305811731942552551220034197419379986603669442123669514747959298328764494786485716556408066583059892651164468179736553588208382811990602983983815319441735529063906149256642444095953113006196189657761830152487729134941737341825844391195416690127791946118157316116899231111454298077308767847294415189618184291864562296853896741207999048391422480043952523148862814690222401478648304559267565397012820362995029026644458126050145406160643894564257308359392964615587701814854954326402926100246865621166426588997891121374590915402089260003809780107377624381421921350911371450490593208156714795777691345550401062541248364377382752310682394580139391599012587599350105885727874012101283452256488413994403404744302660410499256670693237214106430689487509061964486525059851063516701170095866916888565541238614602544576155612000484845379797475970905884104434085086661760351409271755880034522088952855238402689603555705193758720000000000000 = 1 - 0.87407022055024897037752834769787999152

13 running lrs
13 0.874083 (with h=13, the furthest possible with the 254 hyperplane restriction)

Monte Carlo suggests 0.87411 to 5dp.

deg4_3: 24360083579536653980026992085661707/189692965607627338716651497072640000  =   1.284184866925e-01
john@john-Latitude-E5470:~/hyper$ vinci -m lrs deg4_4 | grep Volume
Volume:  84881193801889700449550468262483426002458246098651741251/667498128368111496869605515181004404115781019344568320000  =   1.271631937147e-01
john@john-Latitude-E5470:~/hyper$ vinci -m lrs deg4_5 | grep Volume
Volume:  2372555197058711927345494879325250810418452492243889570993648377786641076672043463138614050919504009995912222587982508793199091237170715706708277059718749524216426976660911/18773501103037500533230528174515704532464524463090489135485757298966293 =  1.263778761371e+100
john@john-Latitude-E5470:~/hyper$ vinci -m lrs deg4_6 | grep Volume
Volume:  37117473957086658805038388586393041685046189841793940928776966149394082497662882850425241585559521239046456389203275112040943899787639558679736806003149541066428777532041306134161250464144363/2939294185950093635395336625437944197615813885095154 =  1.262802278673e+138


Height 3 data in hyper4.ine, using exact lrs (vinci -m lrs hyper4) outputs exact volume v=1.316.. hence lower bound 1-v=0.868... = 1308537172362208151115677213/1506930045349828527267840000 = 
(29 * 689599 * 596811671 * 109636240793) /
(2^16 * 3^11 * 5^4 * 7^2 * 11 * 13 * 17 * 19 * 23 * 31 * 41 * 43 * 73)

Genus 2, degree 6, successive height bounds on hyperplanes:

Note: Run vinci on data file deg6_${n}.ine or deg6_${n}.ext with
e.g. "vinci deg6_1" to get a volume V; the lower bound we want is 1-V.
e.g. vinci data/deg6_5 gives V=9.911633449215e-02, hence lower bound
0.90088366550785. [Much better: run lrs on the .ext file.]

*.ine files have hyperplane definitions, smaller but slower
computation.  *.ext files have vertex definitions, faster computation
but larger files. The lrs program can convert between these two types,
e.g. "lrs data/deg6_5.ine" outputs deg6_5.ext EXCEPT that the line
after "begin" contains ***** which must be replaced by he number of
other lines between "begin" and "end", i.e. the actual number of
vertices.  Also add a line to the .ext file after "end" with just
"volume", then rerun lrs on this .ext file to compute the exact
rational volume.

h  bound
1  0.8565321180556
2  0.8895797081797
3  0.8978286024264
4  0.8998689074671
5  0.90088366550785 (0.6s)
6  0.90117269383887 (1.3s from ext, 95.3s & more memory needed from ine)
7  0.9014149230567  (9.7s from ext)
8  0.90151214419962 (40.4s from ext)


Genus 3, degree 8, successive height bounds on hyperplanes:

h bound
1 0.867927
2 0.90267719754566 (0.2s)
3 0.91294983903956 (1.6s)
4 0.91588695611899 (6.5s)
5 0.91722211169643 (134s)

Genus 4, degree 10, successive height bounds on hyperplanes:

h bound
1 0.8757138323543 (0.1s)
2 0.9109660209769 (5.1s)
3 0.92265046429962 (59.2s)
4 0.92645423266898 (717.4s)

This suggests that we might be able to prove a lower bound of 90% for
all g>1, using only the values at 2, 1/2, -2, -1/2 as well as -1, 1.

Genus 5, degree 12, successive height bounds on hyperplanes:

h bound
2 0.91675682432011 (127.9s)

======================================================================

Height 2 hyperplanes:

g=1, deg=4:  0.8654560307203
g=2, deg=6:  0.8895797081797
g=3, deg=8:  0.9026771975456

Height 3 hyperplanes:

g=1, deg=4:  0.8683463286170
g=2, deg=6:  0.8916205067882
g=3, deg=8:  0.9042953876781

These exact volumes are obtained using *.ext files e.g. "vinci -m lrs
deg6_2", and the lrs executable (or a link) must be in the cuurect
directory.  OR (simpler and more reliable, since vinci just calls
lrs): add the word "volume" on a single line after "end" in the .ext
file and just run lrs on the file.

deg 6, ht 2: Volume:
77256349758298059510894967024960483/699657177903484989710310360219648000
= 1.104202918203e-01 = 1- 0.889579708179660417759445
[compare with             0.8895797081797]

NB this is already better than the LB 0.888818 from the boxes program.

deg 6, ht 3: Volume: 520552588969297976384954938771107327722676715833343034223870991976822193893387902120553811552876706066748241142529139383823864700966916383931714395135062218747135577731912992928842199668160264298420590915382461723489617978021349760559933832156943587375146238438955894316505805773862271/5094895453415895373162495743413525490475650649810562656136396723077031563549593490689970055019687226142255825064446744914483035400814525729580079485302179295038695551155006258224551191378627112991187694390604433794546532155780721484517353528525123352639207311151652577656921128960000000 = 1 - 0.8978286024259258995899...
[compare with       0.8978286024264...]

deg 6, ht 4 Volume: 3530128015849223965072859165060162126165668292170459817958779741752365201753239320777817442785838025737065103445994770117942205411607147481323514368875682680368177387555335123656372897108002059700053186010779851892803619628135348392620616008109979216048641655370956465978702541432319511895151979248359275166911247153617309182164080899546204873259000092159539130010649741379934521668762627614750550240253777789539378137580831875089701338637696338278713433430329808396667486562957840685519095318240287812787035236037876509266246437746561357613497245684352409630547145176175126652106148616150799118668539866885483643163370497629674656700176318773540258565933629869578780698799036406903364077296300117780038204713784227332049648797392669952150675850859342369603381017325483730661554594135816016060077078113/35255063402839681838816587153067040305387169794237998661356647220474112318800074189722132354208230996737933772522836583258502212191741660574303846114564537297756486854447796716136256798233067523744395987538341042381018748242062461912111188948661786437271502412392062555270382793255235172605126969594269433857948556926410011991753270533053497678851907896905694893844201623472788064062423871513064164789140395385581003931186866038334165922403242499708028865553558375965032498750923918603589903189945158310581681779328403352146981042812770788829287515266700836907717015760245683298005079871875876208426147893791981698490895215579715138338254577083113480536064535660991961696851551892454655297047219055838536862493538257950187770469129839087267549654255190896254402257077812996642701126715969844019200000000
        = 1 - 0.89986890746692336057163867548091567635  (34115s)
[compare with 0.8998689074671]

deg 8, ht 2: Volume: (rerun)
2190988766094332950773461407648350143269404370100920355725155943003050836972819/22512594282539919071324938451154952953714263549543912205481751535440363520000000
=          1 -0.90267719754566016597066776900175621178 (40896s)
[compare with 0.90267719754566]

NB this is already better than the LB 0.885066 from the boxes program.

deg 10, ht 2: Volume: (running)

deg 12, ht 2: Volume: (running)

